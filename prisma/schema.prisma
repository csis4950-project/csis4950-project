// * after create schemas, run `npx prisma migrate dev --name init`;
// * above code runs `npx prisma generate` under the hood by default;
// ! .env file should belong to root directory
// * When the command does not work, check the privious migration file and directry change;

// * commend for updating schema: npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String    @db.String(25)
  lastName  String    @db.String(25)
  email     String    @unique
  password  String    @db.String(60)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relations
  ownerId           Organization[]     @relation("ownerId")
  memberId          DepartmentMember[] @relation("memberId")
  announcementOwner Announcement[]     @relation("ownerId")
  userWage          UserWage[]         @relation("userId")
  requestOwner      Request[]          @relation("ownerId")
  assignedUser      Shift[]            @relation("userId")
  workedUser        WorkTime[]         @relation("userId")
  userAvailability  Availability[]     @relation("userId")
}

model Organization {
  id        String    @id @default(uuid())
  ownerId   String
  name      String    @db.String(25)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relations
  owner          User         @relation("ownerId", fields: [ownerId], references: [id])
  organizationId Department[] @relation("organizationId")
}

model Department {
  id             String    @id @default(uuid())
  organizationId String
  name           String    @db.String(25)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // relations
  organization        Organization       @relation("organizationId", fields: [organizationId], references: [id])
  departmentId        DepartmentMember[] @relation("departmentId")
  userWageDepartment  UserWage[]         @relation("departmentId")
  announcedDepartment Announcement[]     @relation("departmentId")
  shiftDepartment     Shift[]            @relation("departmentId")
  requestDepartment   Request[]          @relation("departmentId")
  workerDepartment    WorkTime[]         @relation("departmentId")
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique @db.String(25)
  description String    @db.String(150)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // relations
  roleId DepartmentMember[] @relation("roleId")
}

model DepartmentMember {
  id           String @id @default(uuid())
  departmentId String
  memberId     String
  roleId       String

  //relations
  department Department @relation("departmentId", fields: [departmentId], references: [id])
  member     User       @relation("memberId", fields: [memberId], references: [id])
  role       Role       @relation("roleId", fields: [roleId], references: [id])
}

model Wage {
  id             String    @id @default(uuid())
  organizationId String
  wageAmount     Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // relations
  wage UserWage[] @relation("wageId")

  // constraints
  @@unique(name: "orgWage", [organizationId, wageAmount])
}

model UserWage {
  id           String    @id @default(uuid())
  userId       String
  departmentId String
  wageId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // relations
  userWage           User       @relation("userId", fields: [userId], references: [id])
  userWageDepartment Department @relation("departmentId", fields: [departmentId], references: [id])
  wage               Wage       @relation("wageId", fields: [wageId], references: [id])

  // constraints
  @@unique(name: "a", [userId, departmentId, deletedAt])
}

model Request {
  id           String    @id @default(uuid())
  ownerId      String
  departmentId String
  typeTagId    String
  statusTagId  String
  shiftId      String?
  startTime    DateTime?
  endTime      DateTime?
  detail       String    @db.String(150)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // relations
  requestOwner      User       @relation("ownerId", fields: [ownerId], references: [id])
  requestDepartment Department @relation("departmentId", fields: [departmentId], references: [id])
  shiftRequest      Shift?     @relation("shiftId", fields: [shiftId], references: [id])
  requestType       Tag        @relation("typeTagId", fields: [typeTagId], references: [id])
  status            Tag        @relation("statusTagId", fields: [statusTagId], references: [id])
}

model Shift {
  id           String    @id @default(uuid())
  userId       String
  departmentId String
  tagId        String
  startTime    DateTime
  endTime      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // relations
  assignedUser    User       @relation("userId", fields: [userId], references: [id])
  shiftDepartment Department @relation("departmentId", fields: [departmentId], references: [id])
  shiftTag        Tag        @relation("tagId", fields: [tagId], references: [id])
  shiftRequest    Request[]  @relation("shiftId")
}

model WorkTime {
  id           String    @id @default(uuid())
  userId       String
  departmentId String
  startTime    DateTime
  endTime      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // relations
  workedUser       User       @relation("userId", fields: [userId], references: [id])
  workerDepartment Department @relation("departmentId", fields: [departmentId], references: [id])
}

model Availability {
  id        String    @id @default(uuid())
  userId    String
  tagId     String
  startTime String?
  endTime   String?
  note      String?   @db.String(250)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relations
  userAvailability User @relation("userId", fields: [userId], references: [id])
  tagAvailability  Tag  @relation("tagId", fields: [tagId], references: [id])
}

model Announcement {
  id             String    @id @default(uuid())
  ownerId        String
  departmentId   String
  typeTagId      String
  title          String    @db.String(25)
  detail         String    @db.String(250)
  expirationTime DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // relations
  announcedDepartment Department @relation("departmentId", fields: [departmentId], references: [id])
  announcementOwner   User       @relation("ownerId", fields: [ownerId], references: [id])
  announcementType    Tag        @relation("typeTagId", fields: [typeTagId], references: [id])
}

model Tag {
  id          String    @id @default(uuid())
  tagTypeId   String
  name        String    @db.String(25)
  description String    @db.String(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // relations
  announcementType Announcement[] @relation("typeTagId")
  requestType      Request[]      @relation("typeTagId")
  statusType       Request[]      @relation("statusTagId")
  shiftTag         Shift[]        @relation("tagId")
  tagAvailability  Availability[] @relation("tagId")
  tagType          TagType        @relation("tagTypeId", fields: [tagTypeId], references: [id])

  // constraints
  @@unique(name: "tag", [tagTypeId, name])
}

model TagType {
  id        String    @id @default(uuid())
  name      String    @unique @db.String(25)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relations
  tagType Tag[] @relation("tagTypeId")
}
